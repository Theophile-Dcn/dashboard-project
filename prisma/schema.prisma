datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  cars          Car[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Car {
  id           Int           @id @default(autoincrement())
  name         String
  price        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  User         User          @relation(fields: [userId], references: [id])
  reservations Reservation[]
}

model Reservation {
  id        Int        @id @default(autoincrement())
  carId     Int
  clientId  Int
  startDate DateTime
  endDate   DateTime
  car       Car        @relation(fields: [carId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Material  Material[]
  Client    Client[]
}

model Material {
  id            Int         @id @default(autoincrement())
  name          String
  price         Int
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Client {
  id            Int         @id @default(autoincrement())
  name          String
  phoneNumber   Int
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
